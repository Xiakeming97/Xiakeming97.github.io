<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XIAKEMING</title>
  
  <subtitle>XIAKEMING</subtitle>
  <link href="https://xiakeming97.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiakeming97.github.io/"/>
  <updated>2023-10-24T11:58:56.159Z</updated>
  <id>https://xiakeming97.github.io/</id>
  
  <author>
    <name>Ming Hui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记录发布第一个Edge插件</title>
    <link href="https://xiakeming97.github.io/2023/10/14/ji-lu-fa-bu-di-yi-ge-edge-cha-jian/"/>
    <id>https://xiakeming97.github.io/2023/10/14/ji-lu-fa-bu-di-yi-ge-edge-cha-jian/</id>
    <published>2023-10-14T02:34:15.000Z</published>
    <updated>2023-10-24T11:58:56.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Edge-插件"><a href="#什么是-Edge-插件" class="headerlink" title="什么是 Edge 插件"></a>什么是 Edge 插件</h2><p>就是Edge浏览器的插件(类似谷歌浏览器插件),对于这个插件其实也是一个前端项目包含插件特定的文件就成了谷歌插件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-Edge-插件&quot;&gt;&lt;a href=&quot;#什么是-Edge-插件&quot; class=&quot;headerlink&quot; title=&quot;什么是 Edge 插件&quot;&gt;&lt;/a&gt;什么是 Edge 插件&lt;/h2&gt;&lt;p&gt;就是Edge浏览器的插件(类似谷歌浏览器插件),对于这个插件其实也是</summary>
      
    
    
    
    <category term="教程" scheme="https://xiakeming97.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Edge插件" scheme="https://xiakeming97.github.io/tags/Edge%E6%8F%92%E4%BB%B6/"/>
    
    <category term="字符串格式化" scheme="https://xiakeming97.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式简单归纳</title>
    <link href="https://xiakeming97.github.io/2023/10/14/zheng-ze-biao-da-shi-jian-dan-gui-na/"/>
    <id>https://xiakeming97.github.io/2023/10/14/zheng-ze-biao-da-shi-jian-dan-gui-na/</id>
    <published>2023-10-14T02:30:57.000Z</published>
    <updated>2023-10-14T03:16:42.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语法-正则表达式测试网站"><a href="#语法-正则表达式测试网站" class="headerlink" title="语法 | 正则表达式测试网站"></a>语法 | <a href="https://wangwl.net/static/projects/visualRegex#">正则表达式测试网站</a></h2><table><thead><tr><th>语法</th><th>描述</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>[abc]</td><td>单个字符：a、b 或 c</td><td>[^abc]</td><td>单个字符：不是 a、b 或 c 的字符</td></tr><tr><td>[a-zA-Z0-9]</td><td>单个字符：字母、数字或下划线</td><td>.</td><td>任意字符</td></tr><tr><td>\s</td><td>空字符（空格、制表符等）</td><td>\S</td><td>非空字符</td></tr><tr><td>\d</td><td>数字字符</td><td>\D</td><td>非数字字符</td></tr><tr><td>\w</td><td>单词字符（字母、数字、下划线）</td><td>\W</td><td>非单词字符</td></tr><tr><td>\b</td><td>单词边界</td><td>\B</td><td>非单词边界</td></tr><tr><td>^</td><td>开头</td><td>$</td><td>结尾</td></tr><tr><td>(a|b)</td><td>a 或 b</td><td>a*</td><td>重复 0 次或多次</td></tr><tr><td>a?</td><td>重复 0 次或 1 次</td><td>a+</td><td>重复 1 次或多次</td></tr><tr><td>a{3}</td><td>重复 3 次</td><td>a{3,}</td><td>重复 3 次或多次</td></tr><tr><td>a{3,5}</td><td>重复 3 到 5 次</td><td>?</td><td>非贪婪匹配</td></tr><tr><td>(…)</td><td>分组</td><td>(?:a)</td><td>非捕获分组</td></tr><tr><td>a(?&#x3D;b)</td><td>正向断言</td><td>a(?!b)</td><td>正向否定断言</td></tr><tr><td>(?&lt;&#x3D;b)a</td><td>反向断言</td><td>(?&lt;!b)a</td><td>反向否定断言</td></tr><tr><td><code>(?&lt;name&gt;a)</code></td><td>命名分组</td><td><code>\k&lt;name&gt;</code></td><td>命名反向引用</td></tr><tr><td>\n</td><td>反向引用，n 为 0 到 99 的十进制数字</td><td>\xhh</td><td>十六进制 hh 字符</td></tr><tr><td>\uhhhh</td><td>十六进制 hhhh 字符</td><td>\u{hhhh}</td><td>（仅当设置了 u 标志时）十六进制 hhhh 字符</td></tr><tr><td>\cX</td><td>控制字符</td><td>\0</td><td>空字符</td></tr><tr><td>\a</td><td>alert 字符</td><td>\t</td><td>制表符</td></tr><tr><td>\n</td><td>换行符</td><td>\v</td><td>垂直制表符</td></tr><tr><td>\f</td><td>换页符</td><td>\r</td><td>回车符</td></tr><tr><td>\e</td><td>escape 字符</td><td>[\b]</td><td>退格符</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;语法-正则表达式测试网站&quot;&gt;&lt;a href=&quot;#语法-正则表达式测试网站&quot; class=&quot;headerlink&quot; title=&quot;语法 | 正则表达式测试网站&quot;&gt;&lt;/a&gt;语法 | &lt;a href=&quot;https://wangwl.net/static/projects</summary>
      
    
    
    
    <category term="教程" scheme="https://xiakeming97.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="正则表达式" scheme="https://xiakeming97.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>前端对于请求去重方案</title>
    <link href="https://xiakeming97.github.io/2023/09/26/qian-duan-dui-yu-qing-qiu-qu-chong-fang-an/"/>
    <id>https://xiakeming97.github.io/2023/09/26/qian-duan-dui-yu-qing-qiu-qu-chong-fang-an/</id>
    <published>2023-09-26T06:41:24.000Z</published>
    <updated>2023-09-26T06:49:00.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="先在这里简单的写，保存起来"><a href="#先在这里简单的写，保存起来" class="headerlink" title="先在这里简单的写，保存起来"></a>先在这里简单的写，保存起来</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 避免重复发送相同的请求(request是同一个对象，只会解析一次第二次解析会报错误) */</span><span class="token keyword">import</span> responseInterceptor <span class="token keyword">from</span> <span class="token string">"./responseInterceptor"</span><span class="token punctuation">;</span><span class="token keyword">const</span> pendingRequests <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓存相同请求</span><span class="token keyword">const</span> resultCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓存请求结果数据</span><span class="token keyword">const</span> cacheExpirationTime <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span> <span class="token comment">// 缓存过期时间（以毫秒为单位）</span><span class="token keyword">const</span> cacheCleanupInterval <span class="token operator">=</span> <span class="token number">60000</span><span class="token punctuation">;</span> <span class="token comment">// 缓存清理间隔时间（以毫秒为单位）</span><span class="token comment">// 启动定时清理缓存的计时器</span><span class="token function">setInterval</span><span class="token punctuation">(</span>cleanUpCache<span class="token punctuation">,</span> cacheCleanupInterval<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">cleanUpCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> currentTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>requestKey<span class="token punctuation">,</span> cachedResult<span class="token punctuation">]</span> <span class="token keyword">of</span> resultCache<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTime <span class="token operator">-</span> cachedResult<span class="token punctuation">.</span>timestamp <span class="token operator">>=</span> cacheExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果缓存数据已过期，从缓存中删除</span>      resultCache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 使用请求URL和选项作为键来标识请求(这里的key还是有点问题，主要是json转化的问题)</span>  <span class="token keyword">const</span> requestKey <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 检查是否有缓存的结果</span>  <span class="token keyword">const</span> cachedResult <span class="token operator">=</span> resultCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果缓存结果存在并未过期，直接返回缓存结果</span>    <span class="token keyword">const</span> currentTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTime <span class="token operator">-</span> cachedResult<span class="token punctuation">.</span>timestamp <span class="token operator">&lt;</span> cacheExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> cachedResult<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果缓存数据已过期，从缓存中删除</span>      resultCache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 检查是否已经有一个相同的请求在等待</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingRequests<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> pendingRequests<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 创建一个新的 Promise 对象，用于处理请求</span>  <span class="token keyword">const</span> requestPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 发送请求</span>      <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 响应拦截器</span>      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">responseInterceptor</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> url<span class="token punctuation">,</span> <span class="token literal-property property">init</span><span class="token operator">:</span> options <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解决 Promise 并传递结果</span>      <span class="token comment">// 缓存结果</span>      resultCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> result<span class="token punctuation">,</span> <span class="token literal-property property">timestamp</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拒绝 Promise 并传递错误</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 请求完成后从 pendingRequests 中移除</span>      pendingRequests<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将 Promise 存储在 pendingRequests 中</span>  pendingRequests<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>requestKey<span class="token punctuation">,</span> requestPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> requestPromise<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;先在这里简单的写，保存起来&quot;&gt;&lt;a href=&quot;#先在这里简单的写，保存起来&quot; class=&quot;headerlink&quot; title=&quot;先在这里简单的写，保存起来&quot;&gt;&lt;/a&gt;先在这里简单的写，保存起来&lt;/h1&gt;&lt;pre class=&quot;line-numbers lang</summary>
      
    
    
    
    <category term="React" scheme="https://xiakeming97.github.io/categories/React/"/>
    
    
    <category term="fetch、请求合并" scheme="https://xiakeming97.github.io/tags/fetch%E3%80%81%E8%AF%B7%E6%B1%82%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>React生命周期</title>
    <link href="https://xiakeming97.github.io/2023/09/25/react-sheng-ming-zhou-qi/"/>
    <id>https://xiakeming97.github.io/2023/09/25/react-sheng-ming-zhou-qi/</id>
    <published>2023-09-25T08:54:22.000Z</published>
    <updated>2023-09-25T08:55:51.791Z</updated>
    
    
    
    
    <category term="React" scheme="https://xiakeming97.github.io/categories/React/"/>
    
    
    <category term="React" scheme="https://xiakeming97.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript字符串API</title>
    <link href="https://xiakeming97.github.io/2023/09/04/javascript-zi-fu-chuan-api/"/>
    <id>https://xiakeming97.github.io/2023/09/04/javascript-zi-fu-chuan-api/</id>
    <published>2023-09-04T11:31:09.000Z</published>
    <updated>2023-09-04T11:59:08.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-字符串-API-列表"><a href="#JavaScript-字符串-API-列表" class="headerlink" title="JavaScript 字符串 API 列表"></a>JavaScript 字符串 API 列表</h2><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td><a href="#at">at()</a></td><td>方法接受一个整数值，并返回一个新的 String，该字符串由位于指定偏移量处的单个 UTF-16 码元组成。该方法允许正整数和负整数。负整数从字符串中的最后一个字符开始倒数。</td></tr><tr><td><a href="#charAt">charAt()</a></td><td>返回一个由给定索引处的单个 UTF-16 码元构成的新字符串符,如果 index 超出了 0 – str.length - 1 的范围，charAt() 将返回一个空字符串</td></tr></tbody></table><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/at">MDN 资料</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sentence <span class="token operator">=</span> <span class="token string">"The quick brown fox jumps over the lazy dog."</span><span class="token punctuation">;</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Using an index of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> the character returned is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>sentence<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: "Using an index of 5 the character returned is u"</span>index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Using an index of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> the character returned is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>sentence<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: "Using an index of -4 the character returned is d"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="charAt"><a href="#charAt" class="headerlink" title="charAt"></a>charAt</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt">MDN 资料</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sentence <span class="token operator">=</span> <span class="token string">"The quick brown fox jumps over the lazy dog."</span><span class="token punctuation">;</span><span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The character at index </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>sentence<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Expected output: "The character at index 4 is q"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JavaScript-字符串-API-列表&quot;&gt;&lt;a href=&quot;#JavaScript-字符串-API-列表&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 字符串 API 列表&quot;&gt;&lt;/a&gt;JavaScript 字符串 API 列表&lt;/</summary>
      
    
    
    
    <category term="面试" scheme="https://xiakeming97.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="JS字符串" scheme="https://xiakeming97.github.io/tags/JS%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>vim 基础命令</title>
    <link href="https://xiakeming97.github.io/2023/08/23/vim-ji-chu-ming-ling/"/>
    <id>https://xiakeming97.github.io/2023/08/23/vim-ji-chu-ming-ling/</id>
    <published>2023-08-23T12:57:45.000Z</published>
    <updated>2023-08-23T13:02:55.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VIM-的基础命令"><a href="#VIM-的基础命令" class="headerlink" title="VIM 的基础命令"></a>VIM 的基础命令</h1><p>VIM 是一款非常强大的文本编辑器，其命令非常丰富。下面是 Vim 的一些基础命令：</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="进入编辑模式"><a href="#进入编辑模式" class="headerlink" title="进入编辑模式"></a>进入编辑模式</h3><ul><li>使用 <code>:</code> 或 <code>/</code> 加字符串命令，例如 <code>:hello</code> 或 <code>/hello</code>，来打开一个新文件或在现有文件中查找字符串。</li><li>使用 <code>Esc</code> 键可以从命令模式返回到编辑模式。</li></ul><h3 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h3><ul><li><code>:s/old/new/g</code>：替换字符串 old 为 new。</li><li><code>:%s/old/new/g</code>：替换全局所有 old 为 new。</li><li><code>:%s/old/new/a</code>：替换全局所有 old 并保存。</li><li><code>:%s/old/new/!</code>：替换全局所有 old 但不保存。</li><li><code>:%s/old/new/n</code>：替换全局所有 old，不替换空行。</li></ul><h3 id="插入和粘贴"><a href="#插入和粘贴" class="headerlink" title="插入和粘贴"></a>插入和粘贴</h3><ul><li><code>i</code>：在当前位置插入文本。</li><li><code>a</code>：在当前位置附近插入文本。</li><li><code>o</code>：在当前行之后插入新行。</li><li><code>O</code>：在当前行之前插入新行。</li><li><code>y</code>：复制当前行。</li><li><code>p</code>：粘贴复制的内容。</li><li><code>%y</code>：复制全局所有行。</li><li><code>%p</code>：粘贴全局所有行。</li></ul><h3 id="删除和复制删除"><a href="#删除和复制删除" class="headerlink" title="删除和复制删除"></a>删除和复制删除</h3><ul><li><code>d</code>：删除当前字符或行。</li><li><code>dd</code>：删除当前行。</li><li><code>yD</code>：删除并复制当前行。</li><li><code>pD</code>：粘贴并删除复制的行。</li><li><code>%D</code>：删除全局所有行。</li><li><code>%p</code>：粘贴全局所有行并删除它们。</li></ul><h3 id="退出和保存"><a href="#退出和保存" class="headerlink" title="退出和保存"></a>退出和保存</h3><ul><li><code>:q!</code>：强制退出 Vim，并清空文件内容。</li><li><code>:w</code>：保存文件并退出 Vim。</li><li><code>:q</code>：退出 Vim，不保存文件。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VIM-的基础命令&quot;&gt;&lt;a href=&quot;#VIM-的基础命令&quot; class=&quot;headerlink&quot; title=&quot;VIM 的基础命令&quot;&gt;&lt;/a&gt;VIM 的基础命令&lt;/h1&gt;&lt;p&gt;VIM 是一款非常强大的文本编辑器，其命令非常丰富。下面是 Vim 的一些基础命令：</summary>
      
    
    
    
    <category term="教程" scheme="https://xiakeming97.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="vim" scheme="https://xiakeming97.github.io/tags/vim/"/>
    
    <category term="Linux" scheme="https://xiakeming97.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>React项目页面跳转总结</title>
    <link href="https://xiakeming97.github.io/2023/08/05/react-xiang-mu-ye-mian-tiao-zhuan-zong-jie/"/>
    <id>https://xiakeming97.github.io/2023/08/05/react-xiang-mu-ye-mian-tiao-zhuan-zong-jie/</id>
    <published>2023-08-05T09:14:09.000Z</published>
    <updated>2023-08-05T09:17:15.408Z</updated>
    
    
    
    
    <category term="教程" scheme="https://xiakeming97.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="React" scheme="https://xiakeming97.github.io/tags/React/"/>
    
    <category term="路由跳转" scheme="https://xiakeming97.github.io/tags/%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>Yarn 简单使用经验</title>
    <link href="https://xiakeming97.github.io/2023/08/05/yarn-jian-dan-shi-yong-jing-yan/"/>
    <id>https://xiakeming97.github.io/2023/08/05/yarn-jian-dan-shi-yong-jing-yan/</id>
    <published>2023-08-05T02:17:39.000Z</published>
    <updated>2023-08-05T10:01:01.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要写这个文档"><a href="#为什么要写这个文档" class="headerlink" title="为什么要写这个文档"></a>为什么要写这个文档</h2><p>因为在写前端项目的时候，以前都是使用的 npm 来管理项目中的包。最近在使用 npm 时发现包之间的依赖关系维护起来很烦，切换到 Yarn 后可以很好的解决这个问题，所以决定去官网阅读文档，写下了下面的文章</p><h2 id="Yarn-是什么"><a href="#Yarn-是什么" class="headerlink" title="Yarn 是什么"></a>Yarn 是什么</h2><p>来自<a href="https://yarn.bootcss.com/index.html">官网</a>的介绍：快速、可靠、安全的依赖管理工具。</p><h2 id="安装-Yarn"><a href="#安装-Yarn" class="headerlink" title="安装 Yarn"></a>安装 Yarn</h2><p>使用 npm 的方式来安装 Yarn</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--global</span> <span class="token function">yarn</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><a href="#init">init</a></td><td>初始话一个新项目</td></tr><tr><td><a href="#yarn">yarn</a></td><td>安装项目的全部依赖</td></tr><tr><td><a href="#add">add</a></td><td>添加依赖包</td></tr><tr><td><a href="#upgrade">upgrade</a></td><td>升级依赖包</td></tr><tr><td><a href="#remove">remove</a></td><td>移除依赖包</td></tr></tbody></table><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>添加到<code>devDependencies</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> <span class="token parameter variable">--dev</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加到<code>peerDependencies</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> <span class="token parameter variable">--peer</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加到<code>optionalDependencies</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> <span class="token parameter variable">--optional</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="upgrade"><a href="#upgrade" class="headerlink" title="upgrade"></a>upgrade</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span><span class="token function">yarn</span> upgrade <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> remove <span class="token punctuation">[</span>package<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么要写这个文档&quot;&gt;&lt;a href=&quot;#为什么要写这个文档&quot; class=&quot;headerlink&quot; title=&quot;为什么要写这个文档&quot;&gt;&lt;/a&gt;为什么要写这个文档&lt;/h2&gt;&lt;p&gt;因为在写前端项目的时候，以前都是使用的 npm 来管理项目中的包。最近在使用 npm</summary>
      
    
    
    
    <category term="教程" scheme="https://xiakeming97.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Yarn" scheme="https://xiakeming97.github.io/tags/Yarn/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组API</title>
    <link href="https://xiakeming97.github.io/2023/07/23/javascript-shu-zu-api/"/>
    <id>https://xiakeming97.github.io/2023/07/23/javascript-shu-zu-api/</id>
    <published>2023-07-23T15:27:34.000Z</published>
    <updated>2023-07-23T16:35:58.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组-API-表"><a href="#数组-API-表" class="headerlink" title="数组 API 表"></a>数组 API 表</h2><table><thead><tr><th>方法</th><th>功能</th><th>原数组是否改变</th></tr></thead><tbody><tr><td><a href="#push">push()</a></td><td>在数组的最后一位新增一个或多个数据，返回值是长度</td><td>改变</td></tr><tr><td>unshift()</td><td>在数组的第一位新增一个或多个数据，返回值是长度</td><td>改变</td></tr><tr><td>pop()</td><td>删除最后一位，并返回删除的数据</td><td>改变</td></tr><tr><td>shift()</td><td>删除第一位，并返回删除的数据</td><td>改变</td></tr><tr><td>reverse()</td><td>反转数组，返回结果</td><td>改变</td></tr><tr><td>join()</td><td>使用分隔符，将数组转为字符串并返回</td><td>不改变</td></tr><tr><td>slice()</td><td>截取指定位置的数组，并返回</td><td>不改变</td></tr><tr><td>concat()</td><td>合并数组，并返回合并之后的数据</td><td>不改变</td></tr><tr><td>sort()</td><td>排序(字符规则)，返回结果</td><td>改变</td></tr><tr><td>splice()</td><td>删除指定位置，并替换，返回删除的数据</td><td>改变</td></tr><tr><td>toString()</td><td>直接转为字符串，并返回</td><td>不改变</td></tr><tr><td>valueOf()</td><td>返回数组对象的原始值</td><td>不改变</td></tr><tr><td>indexOf()</td><td>查询并返回数据的索引</td><td>不改变</td></tr><tr><td>lastIndexOf()</td><td>反向查询并返回数据的索引</td><td>不改变</td></tr><tr><td>includes()</td><td>查询数组中是否包含某个元素，返回布尔类型值</td><td>不改变</td></tr><tr><td>forEach()</td><td>参数为回调函数，遍历数组所有的项，回调函数接受三个参数，分别为 value，index，self；forEach 返回值为 undefined</td><td>不改变</td></tr><tr><td>map()</td><td>同 forEach，同时回调函数返回数据，组成新数组由 map 返回</td><td>不改变</td></tr><tr><td>filter()</td><td>同 forEach，同时回调函数返回布尔值，为 true 的数据组成新数组由 filter 返回</td><td>不改变</td></tr><tr><td>every()</td><td>同 forEach，同时回调函数返回布尔值，全部为 true，由 every 返回 true (过滤)</td><td>不改变</td></tr><tr><td>some()</td><td>同 forEach，同时回调函数返回布尔值，只要有一个为 true，由 some 返回 true</td><td>不改变</td></tr><tr><td>reduce()</td><td>归并，同 forEach，迭代数组的所有项，并构建一个最终值，由 reduce 返回</td><td>不改变</td></tr><tr><td>reduceRight()</td><td>反向归并，同 forEach，迭代数组的所有项，并构建一个最终值，由 reduceRight 返回</td><td>不改变</td></tr><tr><td>find()</td><td>返回通过测试（函数内判断）的数组的第一个元素的值。方法为数组中的每个元素都调用一次函数执行：当数组中的元素在测试条件时返回 true 时，find() 返回符合条件的元素，之后的值不会再调用执行函数。如果没有符合条件的元素返回 undefined 注意: find() 对于空数组，函数是不会执行的。注意: find() 并没有改变数组的原始值。</td><td>不改变</td></tr></tbody></table><h2 id="API-例子"><a href="#API-例子" class="headerlink" title="API 例子"></a>API 例子</h2><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#x2F;&#x2F; 原始数组let myArray &#x3D; [1, 2, 3, 4];&#x2F;&#x2F; 使用push()函数在数组末尾添加元素myArray.push(5); &#x2F;&#x2F; 添加一个元素myArray.push(6, 7); &#x2F;&#x2F; 添加多个元素console.log(myArray); &#x2F;&#x2F; 输出: [1, 2, 3, 4, 5, 6, 7]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数组-API-表&quot;&gt;&lt;a href=&quot;#数组-API-表&quot; class=&quot;headerlink&quot; title=&quot;数组 API 表&quot;&gt;&lt;/a&gt;数组 API 表&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;</summary>
      
    
    
    
    <category term="分类" scheme="https://xiakeming97.github.io/categories/%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="标签" scheme="https://xiakeming97.github.io/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>什么是RSS订阅</title>
    <link href="https://xiakeming97.github.io/2023/07/23/shi-me-shi-rss-ding-yue/"/>
    <id>https://xiakeming97.github.io/2023/07/23/shi-me-shi-rss-ding-yue/</id>
    <published>2023-07-23T09:20:55.000Z</published>
    <updated>2023-07-23T10:12:02.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-SRR"><a href="#什么是-SRR" class="headerlink" title="什么是 SRR"></a>什么是 SRR</h2><p>RSS，全称为”Really Simple Syndication”（真正简单聚合），是一种用于发布和订阅更新内容的 Web 内容传递格式。它允许网站所有者将其内容以结构化的方式提供给订阅者，订阅者可以通过使用 RSS 阅读器或聚合器轻松跟踪多个网站的最新内容，而无需访问每个网站。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>1、发布者（网站所有者）创建包含最新内容的 RSS 文件，通常称为”RSS feed”（RSS 源）。<br>2、订阅者使用 RSS 阅读器（也称为 RSS 聚合器）订阅感兴趣的 RSS 源。<br>3、当发布者更新其网站上的内容时，新的内容将自动反映在其对应的 RSS 源中。<br>4、订阅者的 RSS 阅读器定期检查已订阅的 RSS 源，发现更新后会将新内容显示给用户。</p><h2 id="RSS-的优势"><a href="#RSS-的优势" class="headerlink" title="RSS 的优势"></a>RSS 的优势</h2><p>1、便捷性：订阅者可以通过一个单独的阅读器跟踪多个网站的更新，避免了反复访问不同网站的麻烦。<br>2、实时更新：订阅者可以实时获取发布者更新的内容，保持对最新信息的了解。<br>3、隐私保护：与社交媒体不同，RSS 不需要用户提供个人信息或登录账号，保护了用户的隐私。<br>4、控制权：用户可以自由选择订阅或取消订阅任何 RSS 源，拥有更大的自主权。</p><h2 id="RSS-的应用"><a href="#RSS-的应用" class="headerlink" title="RSS 的应用"></a>RSS 的应用</h2><p>RSS 在许多领域都有广泛的应用，其中包括：</p><ul><li>博客：订阅博客的 RSS 源，及时了解博客作者发布的新文章。</li><li>新闻网站：获取新闻机构发布的最新新闻。</li><li>社交媒体：一些社交媒体平台也提供 RSS 源，用户可以跟踪特定用户或主题的更新。</li><li>多媒体内容：订阅播客、视频博客等媒体内容的 RSS 源，获得更新内容。</li></ul><h2 id="如何订阅-RSS"><a href="#如何订阅-RSS" class="headerlink" title="如何订阅 RSS"></a>如何订阅 RSS</h2><h3 id="安装浏览器插件"><a href="#安装浏览器插件" class="headerlink" title="安装浏览器插件"></a>安装浏览器插件</h3><p><strong>Feeder - RSS Feed Reader</strong>可以方便的管理你订阅的网站</p><h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p><a href="https://feeder.co/">RSS 官方网站</a>根据提示注册账号就好了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是-SRR&quot;&gt;&lt;a href=&quot;#什么是-SRR&quot; class=&quot;headerlink&quot; title=&quot;什么是 SRR&quot;&gt;&lt;/a&gt;什么是 SRR&lt;/h2&gt;&lt;p&gt;RSS，全称为”Really Simple Syndication”（真正简单聚合），是一种用于发布</summary>
      
    
    
    
    <category term="教程" scheme="https://xiakeming97.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="SRR" scheme="https://xiakeming97.github.io/tags/SRR/"/>
    
  </entry>
  
  <entry>
    <title>红宝书笔记-代理与反射</title>
    <link href="https://xiakeming97.github.io/2023/07/20/hong-bao-shu-bi-ji-dai-li-yu-fan-she/"/>
    <id>https://xiakeming97.github.io/2023/07/20/hong-bao-shu-bi-ji-dai-li-yu-fan-she/</id>
    <published>2023-07-20T03:23:27.000Z</published>
    <updated>2023-07-20T03:24:08.517Z</updated>
    
    
    
    
    <category term="红宝书" scheme="https://xiakeming97.github.io/categories/%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    
    
    <category term="红宝书笔记" scheme="https://xiakeming97.github.io/tags/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    <category term="代理与反射" scheme="https://xiakeming97.github.io/tags/%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Umijs项目使用dva配合redux-persist做持久化处理</title>
    <link href="https://xiakeming97.github.io/2023/07/20/umijs-xiang-mu-shi-yong-dva-zhong-zuo-chi-jiu-hua-chu-li/"/>
    <id>https://xiakeming97.github.io/2023/07/20/umijs-xiang-mu-shi-yong-dva-zhong-zuo-chi-jiu-hua-chu-li/</id>
    <published>2023-07-20T03:17:05.258Z</published>
    <updated>2023-07-20T03:17:05.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要做数据持久化"><a href="#为什么要做数据持久化" class="headerlink" title="为什么要做数据持久化"></a>为什么要做数据持久化</h2><p>在项目中有的数据需要从后端获取同时这个数据又是全局使用的，不能因为一刷新就重新从后端获取。这样不现实，所以就可以使用到数据持久化并且使用<strong>dva</strong>配合<strong>redux-persist</strong>实现的数据持久化改动的代码特别少，可以说是几乎没有。</p><h2 id="教程项目各依赖版本"><a href="#教程项目各依赖版本" class="headerlink" title="教程项目各依赖版本"></a>教程项目各依赖版本</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"17.x"</span><span class="token punctuation">,</span><span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"17.x"</span><span class="token punctuation">,</span><span class="token property">"redux-persist"</span><span class="token operator">:</span> <span class="token string">"^6.0.0"</span><span class="token punctuation">,</span><span class="token property">"umi"</span><span class="token operator">:</span> <span class="token string">"^3.5.35"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-redux-persist"><a href="#安装-redux-persist" class="headerlink" title="安装 redux-persist"></a>安装 redux-persist</h2><p>在 umijs 项目中开启 dva 数据状态管理后，可以通过 npm 的方式来安装 redux-persist</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i redux-persist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="更改-Umijs-的配置"><a href="#更改-Umijs-的配置" class="headerlink" title="更改 Umijs 的配置"></a>更改 Umijs 的配置</h2><p>在<strong>在 src&#x2F;app.js</strong>文件中添加以下配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> persistStore<span class="token punctuation">,</span> persistReducer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"redux-persist"</span><span class="token punctuation">;</span><span class="token keyword">import</span> storage <span class="token keyword">from</span> <span class="token string">"redux-persist/lib/storage"</span><span class="token punctuation">;</span><span class="token keyword">const</span> persistConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">"root"</span><span class="token punctuation">,</span>  storage<span class="token punctuation">,</span>  <span class="token literal-property property">whitelist</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"enumerate"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 配置白名单 里面写需要配置的名字 也就是dva文件的namespace</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 数据持久化</span><span class="token keyword">const</span> <span class="token function-variable function">persistEnhancer</span> <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">createStore</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">,</span> enhancer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>      <span class="token function">persistReducer</span><span class="token punctuation">(</span>persistConfig<span class="token punctuation">,</span> reducer<span class="token punctuation">)</span><span class="token punctuation">,</span>      initialState<span class="token punctuation">,</span>      enhancer    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> persist <span class="token operator">=</span> <span class="token function">persistStore</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>store<span class="token punctuation">,</span> persist <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> dva <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">config</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">extraEnhancers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">persistEnhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更多资料访问官网"><a href="#更多资料访问官网" class="headerlink" title="更多资料访问官网"></a>更多资料访问<a href="https://github.com/rt2zz/redux-persist">官网</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么要做数据持久化&quot;&gt;&lt;a href=&quot;#为什么要做数据持久化&quot; class=&quot;headerlink&quot; title=&quot;为什么要做数据持久化&quot;&gt;&lt;/a&gt;为什么要做数据持久化&lt;/h2&gt;&lt;p&gt;在项目中有的数据需要从后端获取同时这个数据又是全局使用的，不能因为一刷新就重</summary>
      
    
    
    
    <category term="教程" scheme="https://xiakeming97.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Umijs" scheme="https://xiakeming97.github.io/tags/Umijs/"/>
    
    <category term="dva" scheme="https://xiakeming97.github.io/tags/dva/"/>
    
    <category term="redux-persist" scheme="https://xiakeming97.github.io/tags/redux-persist/"/>
    
    <category term="数据持久化" scheme="https://xiakeming97.github.io/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Umijs项目中的请求封装</title>
    <link href="https://xiakeming97.github.io/2023/07/20/umijs-xiang-mu-zhong-de-qing-qiu-feng-zhuang/"/>
    <id>https://xiakeming97.github.io/2023/07/20/umijs-xiang-mu-zhong-de-qing-qiu-feng-zhuang/</id>
    <published>2023-07-20T03:17:05.257Z</published>
    <updated>2023-07-20T03:17:05.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h2><ul><li><code>&quot;umi&quot;: &quot;^3.5.35&quot;,</code></li></ul><h2 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h2><h3 id="在-src-x2F-app-js-文件中写入以下代码"><a href="#在-src-x2F-app-js-文件中写入以下代码" class="headerlink" title="在 src&#x2F;app.js 文件中写入以下代码"></a>在 src&#x2F;app.js 文件中写入以下代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入依赖</span><span class="token keyword">import</span> httpErrorMessage <span class="token keyword">from</span> <span class="token string">"@/network/httpErrorMessage.js"</span><span class="token punctuation">;</span> <span class="token comment">// 处理请求异常的文字集合</span><span class="token keyword">import</span> codeErrorMessage <span class="token keyword">from</span> <span class="token string">"@/network/codeErrorMessage.js"</span><span class="token punctuation">;</span> <span class="token comment">// 处理根据自身业务定义的请求异常的文字集合</span><span class="token keyword">import</span> urlsWithoutToken <span class="token keyword">from</span> <span class="token string">"@/network/urlsWithoutToken.js"</span><span class="token punctuation">;</span> <span class="token comment">// 不需要携带token URL集合</span><span class="token comment">// 请求封装</span><span class="token keyword">const</span> lang <span class="token operator">=</span> <span class="token string">"zh-CN"</span><span class="token punctuation">;</span> <span class="token comment">// zh-CN | en-US</span><span class="token comment">// 服务器请求错误状态处理</span><span class="token keyword">const</span> <span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> response <span class="token punctuation">&#125;</span> <span class="token operator">=</span> error<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">&amp;&amp;</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> errorText <span class="token operator">=</span>      httpErrorMessage<span class="token punctuation">[</span>lang<span class="token punctuation">]</span><span class="token punctuation">[</span>response<span class="token punctuation">.</span>status<span class="token punctuation">]</span> <span class="token operator">||</span> response<span class="token punctuation">.</span>statusText<span class="token punctuation">;</span>    message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errorText<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> response<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  errorHandler<span class="token punctuation">,</span>  <span class="token literal-property property">requestInterceptors</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 请求拦截器，接收数组，可设置多个拦截器</span>    <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> shouldIncludeToken <span class="token operator">=</span> <span class="token operator">!</span>urlsWithoutToken<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断是否需要携带token</span>      <span class="token keyword">const</span> modifiedOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token operator">...</span>options<span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token operator">...</span><span class="token punctuation">(</span>options<span class="token operator">?.</span>data <span class="token operator">??</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 可在这里对数据中统一处理</span>        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token operator">...</span><span class="token punctuation">(</span>options<span class="token operator">?.</span>headers <span class="token operator">??</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token operator">...</span><span class="token punctuation">(</span>shouldIncludeToken <span class="token operator">&amp;&amp;</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"ACCESS_TOKEN"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// 携带token</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>modifiedOptions<span class="token punctuation">,</span> <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/dev</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>options<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 修改URL只能走这样的方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">responseInterceptors</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 相应拦截器，也接受数组</span>    <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">401</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// token过期的时候自动刷新获取新的token自动登录，当然这是根据自己页面的需求决定，大多都是token过期跳转登录页面，重新登陆</span>          localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token string">"ACCESS_TOKEN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token string">"USERNAME"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 后端规定了一些自定义返回的errorCode码，返回后端的自定义提示信息</span>          <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>messageCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> errorText <span class="token operator">=</span>              codeErrorMessage<span class="token punctuation">[</span>lang<span class="token punctuation">]</span><span class="token punctuation">[</span>data<span class="token punctuation">.</span>messageCode<span class="token punctuation">]</span> <span class="token operator">||</span>              codeErrorMessage<span class="token punctuation">[</span>lang<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//  codeErrorMessage支持多语言环境的json文件，和httpErrorMessage 一样写法</span>            <span class="token comment">// debugger</span>            message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>errorText<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">&amp;&amp;</span> data<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 后端返回200但数据为空的情况</span>            <span class="token keyword">return</span> data<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>          lang <span class="token operator">==</span> <span class="token string">"zh-CN"</span>            <span class="token operator">?</span> <span class="token string">"您的网络发生异常，无法连接服务器"</span>            <span class="token operator">:</span> <span class="token string">"Your network is abnormal and you cannot connect to the server"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="httpErrorMessage-js"><a href="#httpErrorMessage-js" class="headerlink" title="httpErrorMessage.js"></a>httpErrorMessage.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> httpErrorMessage <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"en-US"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token number">200</span><span class="token operator">:</span> <span class="token string">"The server successfully returned the requested data."</span><span class="token punctuation">,</span>    <span class="token number">201</span><span class="token operator">:</span> <span class="token string">"Data is created or modified successfully. Procedure"</span><span class="token punctuation">,</span>    <span class="token number">202</span><span class="token operator">:</span> <span class="token string">"A request has been queued in the background (asynchronous task)."</span><span class="token punctuation">,</span>    <span class="token number">204</span><span class="token operator">:</span> <span class="token string">"Succeeded in deleting data. Procedure"</span><span class="token punctuation">,</span>    <span class="token number">400</span><span class="token operator">:</span> <span class="token string">"The server did not create or modify data."</span><span class="token punctuation">,</span>    <span class="token number">401</span><span class="token operator">:</span> <span class="token string">"User does not have permission (wrong token, username, password)."</span><span class="token punctuation">,</span>    <span class="token number">403</span><span class="token operator">:</span> <span class="token string">"The user is authorized, but access is prohibited."</span><span class="token punctuation">,</span>    <span class="token number">404</span><span class="token operator">:</span> <span class="token string">"The request was made for a nonexistent record, and the server did not act on it."</span><span class="token punctuation">,</span>    <span class="token number">406</span><span class="token operator">:</span> <span class="token string">"The requested format is not available."</span><span class="token punctuation">,</span>    <span class="token number">410</span><span class="token operator">:</span> <span class="token string">"The requested resource is permanently deleted and will not be retrieved."</span><span class="token punctuation">,</span>    <span class="token number">422</span><span class="token operator">:</span> <span class="token string">"A validation error occurred while creating an object."</span><span class="token punctuation">,</span>    <span class="token number">500</span><span class="token operator">:</span> <span class="token string">"An error occurred on the server. Check the server."</span><span class="token punctuation">,</span>    <span class="token number">502</span><span class="token operator">:</span> <span class="token string">"Gateway error."</span><span class="token punctuation">,</span>    <span class="token number">503</span><span class="token operator">:</span> <span class="token string">"The service is unavailable, the server is temporarily overloaded or maintained."</span><span class="token punctuation">,</span>    <span class="token number">504</span><span class="token operator">:</span> <span class="token string">"The gateway timed out."</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"zh-CN"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token number">200</span><span class="token operator">:</span> <span class="token string">"服务器成功返回请求的数据。"</span><span class="token punctuation">,</span>    <span class="token number">201</span><span class="token operator">:</span> <span class="token string">"新建或修改数据成功。"</span><span class="token punctuation">,</span>    <span class="token number">202</span><span class="token operator">:</span> <span class="token string">"一个请求已经进入后台排队（异步任务）。"</span><span class="token punctuation">,</span>    <span class="token number">204</span><span class="token operator">:</span> <span class="token string">"删除数据成功。"</span><span class="token punctuation">,</span>    <span class="token number">400</span><span class="token operator">:</span> <span class="token string">"发出的请求有错误，服务器没有进行新建或修改数据的操作。"</span><span class="token punctuation">,</span>    <span class="token number">401</span><span class="token operator">:</span> <span class="token string">"用户没有权限（令牌、用户名、密码错误）。"</span><span class="token punctuation">,</span>    <span class="token number">403</span><span class="token operator">:</span> <span class="token string">"用户得到授权，但是访问是被禁止的。"</span><span class="token punctuation">,</span>    <span class="token number">404</span><span class="token operator">:</span> <span class="token string">"发出的请求针对的是不存在的记录，服务器没有进行操作。"</span><span class="token punctuation">,</span>    <span class="token number">406</span><span class="token operator">:</span> <span class="token string">"请求的格式不可得。"</span><span class="token punctuation">,</span>    <span class="token number">410</span><span class="token operator">:</span> <span class="token string">"请求的资源被永久删除，且不会再得到的。"</span><span class="token punctuation">,</span>    <span class="token number">422</span><span class="token operator">:</span> <span class="token string">"当创建一个对象时，发生一个验证错误。"</span><span class="token punctuation">,</span>    <span class="token number">500</span><span class="token operator">:</span> <span class="token string">"服务器发生错误，请检查服务器。"</span><span class="token punctuation">,</span>    <span class="token number">502</span><span class="token operator">:</span> <span class="token string">"网关错误。"</span><span class="token punctuation">,</span>    <span class="token number">503</span><span class="token operator">:</span> <span class="token string">"服务不可用，服务器暂时过载或维护。"</span><span class="token punctuation">,</span>    <span class="token number">504</span><span class="token operator">:</span> <span class="token string">"网关超时。"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> httpErrorMessage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="codeErrorMessage-js-这里我没有做什么自定义（因为自身业务不需要）"><a href="#codeErrorMessage-js-这里我没有做什么自定义（因为自身业务不需要）" class="headerlink" title="codeErrorMessage.js 这里我没有做什么自定义（因为自身业务不需要）"></a>codeErrorMessage.js 这里我没有做什么自定义（因为自身业务不需要）</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> codeErrorMessage <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"en-US"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token number">200</span><span class="token operator">:</span> <span class="token string">"The server successfully returned the requested data."</span><span class="token punctuation">,</span>    <span class="token number">201</span><span class="token operator">:</span> <span class="token string">"Data is created or modified successfully. Procedure"</span><span class="token punctuation">,</span>    <span class="token number">202</span><span class="token operator">:</span> <span class="token string">"A request has been queued in the background (asynchronous task)."</span><span class="token punctuation">,</span>    <span class="token number">204</span><span class="token operator">:</span> <span class="token string">"Succeeded in deleting data. Procedure"</span><span class="token punctuation">,</span>    <span class="token number">400</span><span class="token operator">:</span> <span class="token string">"The server did not create or modify data."</span><span class="token punctuation">,</span>    <span class="token number">401</span><span class="token operator">:</span> <span class="token string">"User does not have permission (wrong token, username, password)."</span><span class="token punctuation">,</span>    <span class="token number">403</span><span class="token operator">:</span> <span class="token string">"The user is authorized, but access is prohibited."</span><span class="token punctuation">,</span>    <span class="token number">404</span><span class="token operator">:</span> <span class="token string">"The request was made for a nonexistent record, and the server did not act on it."</span><span class="token punctuation">,</span>    <span class="token number">406</span><span class="token operator">:</span> <span class="token string">"The requested format is not available."</span><span class="token punctuation">,</span>    <span class="token number">410</span><span class="token operator">:</span> <span class="token string">"The requested resource is permanently deleted and will not be retrieved."</span><span class="token punctuation">,</span>    <span class="token number">422</span><span class="token operator">:</span> <span class="token string">"A validation error occurred while creating an object."</span><span class="token punctuation">,</span>    <span class="token number">500</span><span class="token operator">:</span> <span class="token string">"An error occurred on the server. Check the server."</span><span class="token punctuation">,</span>    <span class="token number">502</span><span class="token operator">:</span> <span class="token string">"Gateway error."</span><span class="token punctuation">,</span>    <span class="token number">503</span><span class="token operator">:</span> <span class="token string">"The service is unavailable, the server is temporarily overloaded or maintained."</span><span class="token punctuation">,</span>    <span class="token number">504</span><span class="token operator">:</span> <span class="token string">"The gateway timed out."</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"zh-CN"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token number">200</span><span class="token operator">:</span> <span class="token string">"服务器成功返回请求的数据。"</span><span class="token punctuation">,</span>    <span class="token number">201</span><span class="token operator">:</span> <span class="token string">"新建或修改数据成功。"</span><span class="token punctuation">,</span>    <span class="token number">202</span><span class="token operator">:</span> <span class="token string">"一个请求已经进入后台排队（异步任务）。"</span><span class="token punctuation">,</span>    <span class="token number">204</span><span class="token operator">:</span> <span class="token string">"删除数据成功。"</span><span class="token punctuation">,</span>    <span class="token number">400</span><span class="token operator">:</span> <span class="token string">"发出的请求有错误，服务器没有进行新建或修改数据的操作。"</span><span class="token punctuation">,</span>    <span class="token number">401</span><span class="token operator">:</span> <span class="token string">"用户没有权限（令牌、用户名、密码错误）。"</span><span class="token punctuation">,</span>    <span class="token number">403</span><span class="token operator">:</span> <span class="token string">"用户得到授权，但是访问是被禁止的。"</span><span class="token punctuation">,</span>    <span class="token number">404</span><span class="token operator">:</span> <span class="token string">"发出的请求针对的是不存在的记录，服务器没有进行操作。"</span><span class="token punctuation">,</span>    <span class="token number">406</span><span class="token operator">:</span> <span class="token string">"请求的格式不可得。"</span><span class="token punctuation">,</span>    <span class="token number">410</span><span class="token operator">:</span> <span class="token string">"请求的资源被永久删除，且不会再得到的。"</span><span class="token punctuation">,</span>    <span class="token number">422</span><span class="token operator">:</span> <span class="token string">"当创建一个对象时，发生一个验证错误。"</span><span class="token punctuation">,</span>    <span class="token number">500</span><span class="token operator">:</span> <span class="token string">"服务器发生错误，请检查服务器。"</span><span class="token punctuation">,</span>    <span class="token number">502</span><span class="token operator">:</span> <span class="token string">"网关错误。"</span><span class="token punctuation">,</span>    <span class="token number">503</span><span class="token operator">:</span> <span class="token string">"服务不可用，服务器暂时过载或维护。"</span><span class="token punctuation">,</span>    <span class="token number">504</span><span class="token operator">:</span> <span class="token string">"网关超时。"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> codeErrorMessage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="urlsWithoutToken-js"><a href="#urlsWithoutToken-js" class="headerlink" title="urlsWithoutToken.js"></a>urlsWithoutToken.js</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 不需要携带token的url数组</span><span class="token keyword">const</span> urlsWithoutToken <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> urlsWithoutToken<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简单使用方式-配合-dva-使用"><a href="#简单使用方式-配合-dva-使用" class="headerlink" title="简单使用方式(配合 dva 使用)"></a>简单使用方式(配合 dva 使用)</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入依赖</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> request <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"umi"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getApi</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"/xxx/xxx"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>    params<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// dva中示例代码</span><span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>getApi<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'xxx'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="更多资料"><a href="#更多资料" class="headerlink" title="更多资料"></a>更多资料</h2><ul><li><p><a href="https://v3.umijs.org/zh-CN/plugins/plugin-request#request">@umijs&#x2F;plugin-request</a></p></li><li><p><a href="https://github.com/umijs/umi-request">umijs&#x2F;umi-request: A request tool based on fetch. (github.com)</a></p></li><li><p><a href="https://blog.csdn.net/huanhuan03/article/details/120652598">umi 使用 plugin-request 进行请求的全局配置_umi4 request</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/106796295">useRequest- 蚂蚁中台标准请求 Hooks</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目依赖&quot;&gt;&lt;a href=&quot;#项目依赖&quot; class=&quot;headerlink&quot; title=&quot;项目依赖&quot;&gt;&lt;/a&gt;项目依赖&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;umi&amp;quot;: &amp;quot;^3.5.35&amp;quot;,&lt;/code&gt;&lt;/li&gt;
</summary>
      
    
    
    
    <category term="教程" scheme="https://xiakeming97.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Umijs" scheme="https://xiakeming97.github.io/tags/Umijs/"/>
    
    <category term="plugin-request" scheme="https://xiakeming97.github.io/tags/plugin-request/"/>
    
    <category term="数据请求封装" scheme="https://xiakeming97.github.io/tags/%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Gitmoji Commit Message 使用教程</title>
    <link href="https://xiakeming97.github.io/2023/07/20/git-commit-ti-jiao-gui-fan/"/>
    <id>https://xiakeming97.github.io/2023/07/20/git-commit-ti-jiao-gui-fan/</id>
    <published>2023-07-20T03:17:05.255Z</published>
    <updated>2023-07-20T03:17:05.255Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装必要依赖和配置-都是在项目的根目录下执行"><a href="#安装必要依赖和配置-都是在项目的根目录下执行" class="headerlink" title="安装必要依赖和配置(都是在项目的根目录下执行)"></a>安装必要依赖和配置(都是在项目的根目录下执行)</h2><h3 id="安装-commitlint-与-commitlint-config-gitmoji-依赖。"><a href="#安装-commitlint-与-commitlint-config-gitmoji-依赖。" class="headerlink" title="安装 commitlint 与 commitlint-config-gitmoji 依赖。"></a>安装 commitlint 与 commitlint-config-gitmoji 依赖。</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> commitlint-config-gitmoji commitlint<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"module.exports = &#123;extends: ['gitmoji']&#125;;"</span> <span class="token operator">></span> commitlint.config.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里是启用 gitmoji</p><h3 id="安装-husky"><a href="#安装-husky" class="headerlink" title="安装 husky"></a>安装 husky</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> husky <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加-hook"><a href="#添加-hook" class="headerlink" title="添加 hook"></a>添加 hook</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx husky <span class="token function">add</span> .husky/commit-msg  <span class="token string">'npx --no -- commitlint --edit $&#123;1&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加配置项"><a href="#添加配置项" class="headerlink" title="添加配置项"></a>添加配置项</h3><p>在 <code>package.json</code> 文件中添加 <code>husky</code> 配置</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"husky"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"hooks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"commit-msg"</span><span class="token operator">:</span> <span class="token string">"commitlint -e $HUSKY_GIT_PARAMS"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装必要依赖和配置-都是在项目的根目录下执行&quot;&gt;&lt;a href=&quot;#安装必要依赖和配置-都是在项目的根目录下执行&quot; class=&quot;headerlink&quot; title=&quot;安装必要依赖和配置(都是在项目的根目录下执行)&quot;&gt;&lt;/a&gt;安装必要依赖和配置(都是在项目的根目录</summary>
      
    
    
    
    <category term="Git" scheme="https://xiakeming97.github.io/categories/Git/"/>
    
    
    <category term="Gitmoji" scheme="https://xiakeming97.github.io/tags/Gitmoji/"/>
    
    <category term="Comitlint" scheme="https://xiakeming97.github.io/tags/Comitlint/"/>
    
    <category term="项目规范" scheme="https://xiakeming97.github.io/tags/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/"/>
    
    <category term="Gitmoji Commit Message" scheme="https://xiakeming97.github.io/tags/Gitmoji-Commit-Message/"/>
    
  </entry>
  
  <entry>
    <title>UmiJS-新项目要处理的工作</title>
    <link href="https://xiakeming97.github.io/2023/07/12/umijs-xin-xiang-mu-yao-chu-li-de-gong-zuo/"/>
    <id>https://xiakeming97.github.io/2023/07/12/umijs-xin-xiang-mu-yao-chu-li-de-gong-zuo/</id>
    <published>2023-07-12T02:46:52.000Z</published>
    <updated>2023-07-20T03:17:05.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ProLayoutProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@ant-design/pro-components"</span><span class="token punctuation">;</span><span class="token comment">/** * @name */</span><span class="token keyword">const</span> Settings<span class="token operator">:</span> ProLayoutProps <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span>  pwa<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  logo<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  navTheme<span class="token operator">:</span> <span class="token string">"light"</span><span class="token punctuation">,</span>  <span class="token comment">// 拂晓蓝</span>  colorPrimary<span class="token operator">:</span> <span class="token string">"#1890ff"</span><span class="token punctuation">,</span>  layout<span class="token operator">:</span> <span class="token string">"mix"</span><span class="token punctuation">,</span>  contentWidth<span class="token operator">:</span> <span class="token string">"Fluid"</span><span class="token punctuation">,</span>  fixedHeader<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  fixSiderbar<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  colorWeak<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  title<span class="token operator">:</span> <span class="token string">"Ant Design Pro"</span><span class="token punctuation">,</span>  pwa<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  logo<span class="token operator">:</span> <span class="token string">"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg"</span><span class="token punctuation">,</span>  iconfontUrl<span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  token<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 参见ts声明，demo 见文档，通过token 修改样式</span>    <span class="token comment">//https://procomponents.ant.design/components/layout#%E9%80%9A%E8%BF%87-token-%E4%BF%AE%E6%94%B9%E6%A0%B7%E5%BC%8F</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Settings<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>数据来源参考 <a href="https://beta-pro.ant.design/docs/folder-cn">Ant Design Pro</a></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">├── config # umi 配置，包含路由，构建等配置├── mock # 本地模拟数据├── public│ └── favicon.png # Favicon├── src│ ├── assets # 本地静态资源│ ├── components # 业务通用组件│ ├── e2e # 集成测试用例│ ├── layouts # 通用布局│ ├── models # 全局 dva model│ ├── pages # 业务页面入口和常用模板│ ├── services # 后台接口服务│ ├── utils # 工具库│ ├── locales # 国际化资源│ ├── global.less # 全局样式│ └── global.ts # 全局 JS├── tests # 测试工具├── README.md└── package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="页面目录结构"><a href="#页面目录结构" class="headerlink" title="页面目录结构"></a>页面目录结构</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">src├── components└── pages├── Welcome // 路由组件下不应该再包含其他路由组件，基于这个约定就能清楚的区分路由组件和非路由组件了| ├── components // 对于复杂的页面可以再自己做更深层次的组织，但建议不要超过三层| ├── Form.tsx| ├── index.tsx // 页面组件的代码| └── index.less // 页面样式├── Order // 路由组件下不应该再包含其他路由组件，基于这个约定就能清楚的区分路由组件和非路由组件了| ├── index.tsx| └── index.less├── user // 一系列页面推荐通过小写的单一字母做 group 目录| ├── components // group 下公用的组件集合| ├── Login // group 下的页面 Login| ├── Register // group 下的页面 Register| └── util.ts // 这里可以有一些共用方法之类，不做推荐和约束，看业务场景自行做组织└── \* // 其它页面组件代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="APP-ts-配置"><a href="#APP-ts-配置" class="headerlink" title="APP.ts 配置"></a>APP.ts 配置</h2><h2 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h2><p><a href="http://localhost:4000/2023/06/02/umijs-xiang-mu-zhong-de-qing-qiu-feng-zhuang/">Umijs 项目中的请求封装 | XIAKEMING</a></p><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><p><a href="https://v3.umijs.org/zh-CN/docs/routing">UmiJS3 路由配置</a></p><p><a href="https://umijs.org/docs/guides/routes#path">UmiJS4 路由配置</a></p><h4 id="关于什么是动态路由与动态菜单的区别"><a href="#关于什么是动态路由与动态菜单的区别" class="headerlink" title="关于什么是动态路由与动态菜单的区别"></a>关于什么是<code>动态路由</code>与<code>动态菜单</code>的区别</h4><p>简单来说</p><p><strong>动态路由</strong>就是控制页面访问的链接，当链接不存在时直接 404，可以很好的控制用户权限问题</p><p><strong>动态菜单</strong>就是在已有的路由基础上控制哪个菜单渲染到页面上显示，没有显示的菜单依然可以访问，需要通过权限判断来控制页面要不要显示 403</p><p>当然了这两者使用其一就可以很好的控制菜单权限，当是也可以结合起来使用，效果也不错。</p><h3 id="动态路由方案"><a href="#动态路由方案" class="headerlink" title="动态路由方案"></a>动态路由方案</h3><p>app.ts</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">let</span> extraRoutes<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">//存储服务器路由</span><span class="token comment">/**需要在这里修改路由，直接操作routes就好不需要返回 */</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">patchClientRoutes</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> routes <span class="token punctuation">&#125;</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// element为路由对应组件，需要通过require()来加载或者import() 注意import是异步加载的</span>  extraRoutes<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>element <span class="token operator">=</span>    <span class="token comment">// 在require动态加载时不能直接将完整路径传进去需要使用拼接的方式也就是./pages必须拼接在外面，</span>    <span class="token comment">// 因为如果写全部路径时打包工具会识别不了</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./pages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>extraRoutes<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>component<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 为什么要加到path:'/'的路由下才起作用 不清楚可以打印看看</span>  routes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>extraRoutes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>extraRoutes<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>oldRender<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// getRoutes 请求路由</span>  <span class="token keyword">await</span> <span class="token function">getRoutes</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> userId<span class="token operator">:</span> <span class="token string">"001"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      extraRoutes <span class="token operator">=</span> res<span class="token punctuation">;</span>      <span class="token function">oldRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rej<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rej<span class="token punctuation">,</span> <span class="token string">"rej"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求 mock</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"POST /api/myroutes"</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token operator">:</span> ReqRoutes<span class="token punctuation">,</span> res<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> userId <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      name<span class="token operator">:</span> <span class="token string">"系统管理"</span><span class="token punctuation">,</span>      path<span class="token operator">:</span> <span class="token string">"/system"</span><span class="token punctuation">,</span>      <span class="token comment">// 权限配置</span>      access<span class="token operator">:</span> <span class="token string">"canUser"</span><span class="token punctuation">,</span>      children<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          path<span class="token operator">:</span> <span class="token string">"/system"</span><span class="token punctuation">,</span>          redirect<span class="token operator">:</span> <span class="token string">"/system/menu"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token comment">// 如果不返回name菜单不会渲染，但是还可以访问</span>          name<span class="token operator">:</span> <span class="token string">"菜单配置"</span><span class="token punctuation">,</span>          path<span class="token operator">:</span> <span class="token string">"/system/menu"</span><span class="token punctuation">,</span>          component<span class="token operator">:</span> <span class="token string">"SystemManage/MenuConfigure"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求 API</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">/** 获取路由 POST /api/myroutes */</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getRoutes</span><span class="token punctuation">(</span>  body<span class="token operator">:</span> <span class="token constant">API</span><span class="token punctuation">.</span>Routes<span class="token punctuation">,</span>  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token string">"/api/myroutes"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>    headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> body<span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">(</span>options <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态菜单方案"><a href="#动态菜单方案" class="headerlink" title="动态菜单方案"></a>动态菜单方案</h3><p>1、动态菜单需要提前配置好路由，不管是本地配好，还是通过服务器请求</p><p>2、在 app.ts 中配置以下文件</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// ProLayout 支持的api https://procomponents.ant.design/components/layout</span><span class="token keyword">export</span> <span class="token keyword">const</span> layout<span class="token operator">:</span> <span class="token function-variable function">RunTimeLayoutConfig</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  initialState<span class="token punctuation">,</span>  setInitialState<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    menu<span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 请求参数 当参数改变时会重新执行请求</span>      params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        userId<span class="token operator">:</span> initialState<span class="token operator">?.</span>currentUser<span class="token operator">?.</span>userid<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">request</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>params<span class="token punctuation">,</span> defaultMenuData<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/api/menu"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>          method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>          body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>          headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> menuData <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> menuData<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      locale<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 将 locale 设置为 true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;布局&quot;&gt;&lt;a href=&quot;#布局&quot; class=&quot;headerlink&quot; title=&quot;布局&quot;&gt;&lt;/a&gt;布局&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-typescript&quot; data-language=&quot;typescript&quot;&gt;</summary>
      
    
    
    
    <category term="UmiJS" scheme="https://xiakeming97.github.io/categories/UmiJS/"/>
    
    
    <category term="UmiJS" scheme="https://xiakeming97.github.io/tags/UmiJS/"/>
    
    <category term="项目搭建" scheme="https://xiakeming97.github.io/tags/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>前端项目开发整体流程</title>
    <link href="https://xiakeming97.github.io/2023/07/07/qian-duan-xiang-mu-kai-fa-zheng-ti-liu-cheng/"/>
    <id>https://xiakeming97.github.io/2023/07/07/qian-duan-xiang-mu-kai-fa-zheng-ti-liu-cheng/</id>
    <published>2023-07-07T11:50:39.000Z</published>
    <updated>2023-07-07T11:50:39.993Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>从零开始发布自己的npm包</title>
    <link href="https://xiakeming97.github.io/2023/07/05/cong-ling-kai-shi-fa-bu-zi-ji-de-npm-bao/"/>
    <id>https://xiakeming97.github.io/2023/07/05/cong-ling-kai-shi-fa-bu-zi-ji-de-npm-bao/</id>
    <published>2023-07-05T09:06:08.797Z</published>
    <updated>2023-07-05T11:53:14.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建npm包"><a href="#创建npm包" class="headerlink" title="创建npm包"></a>创建npm包</h2><p>先拿一个 utils 工具文件尝试，放入一些常用的工具函数，如手机号校验、金额格式化等</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建npm包&quot;&gt;&lt;a href=&quot;#创建npm包&quot; class=&quot;headerlink&quot; title=&quot;创建npm包&quot;&gt;&lt;/a&gt;创建npm包&lt;/h2&gt;&lt;p&gt;先拿一个 utils 工具文件尝试，放入一些常用的工具函数，如手机号校验、金额格式化等&lt;/p&gt;
</summary>
      
    
    
    
    <category term="npm" scheme="https://xiakeming97.github.io/categories/npm/"/>
    
    
    <category term="npm" scheme="https://xiakeming97.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>现在自己在使用的git提交规范配置</title>
    <link href="https://xiakeming97.github.io/2023/06/30/xian-zai-zi-ji-zai-shi-yong-de-git-ti-jiao-gui-fan-pei-zhi/"/>
    <id>https://xiakeming97.github.io/2023/06/30/xian-zai-zi-ji-zai-shi-yong-de-git-ti-jiao-gui-fan-pei-zhi/</id>
    <published>2023-06-29T16:18:09.880Z</published>
    <updated>2023-06-29T17:23:40.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>husky<br>操作 git 钩子的工具</li><li>commitlint<br>commit 信息校验工具</li><li>commitizen<br>commit 自动化提示工具，简称 cz</li><li>cz-customizable<br>可自定义的 cz 适配器</li><li>commitlint-config-git-commit-emoji<br>emoji 插件</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装-husky-工具"><a href="#安装-husky-工具" class="headerlink" title="安装 husky 工具"></a>安装 husky 工具</h2><h3 id="安装-husky-插件"><a href="#安装-husky-插件" class="headerlink" title="安装 husky 插件"></a>安装 husky 插件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> husky <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i husky <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在package-json中添加脚本"><a href="#在package-json中添加脚本" class="headerlink" title="在package.json中添加脚本"></a>在<code>package.json</code>中添加脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> set-script prepare <span class="token string">"husky install"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> set-script prepare <span class="token string">"husky install"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="根目录创建-husky文件夹-将-git-hooks-钩子交由-husky-执行"><a href="#根目录创建-husky文件夹-将-git-hooks-钩子交由-husky-执行" class="headerlink" title="根目录创建.husky文件夹,将 git hooks 钩子交由 husky 执行"></a>根目录创建<code>.husky</code>文件夹,将 git hooks 钩子交由 husky 执行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> prepare<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run prepare<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加-commit-msg-钩子-执行信息校验"><a href="#添加-commit-msg-钩子-执行信息校验" class="headerlink" title="添加 commit-msg 钩子,执行信息校验"></a>添加 commit-msg 钩子,执行信息校验</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">'npx --no-install commitlint --edit "$1"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-commitlint"><a href="#安装-commitlint" class="headerlink" title="安装 commitlint"></a>安装 commitlint</h2><h3 id="安装-commit-校验工具"><a href="#安装-commit-校验工具" class="headerlink" title="安装 commit 校验工具"></a>安装 commit 校验工具</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> commitlint @commitlint/config-conventional <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i commitlint @commitlint/config-conventional <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>@commitlint&#x2F;config-conventional</strong> 这是一个规范配置,标识采用什么规范来执行消息校验, 这个默认是 Angular 的提交规范</li></ul><h3 id="创建-commitlint-config-js-配置文件"><a href="#创建-commitlint-config-js-配置文件" class="headerlink" title="创建 commitlint.config.js 配置文件"></a>创建 <code>commitlint.config.js</code> 配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"module.exports = &#123;extends: ['@commitlint/config-conventional']&#125;"</span> <span class="token operator">></span> commitlint.config.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-commitizen"><a href="#安装-commitizen" class="headerlink" title="安装 commitizen"></a>安装 commitizen</h2><h3 id="安装自动化提示工具"><a href="#安装自动化提示工具" class="headerlink" title="安装自动化提示工具"></a>安装自动化提示工具</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> commitizen cz-conventional-changelog <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i commitizen cz-conventional-changelog <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="package-json-中添加-commit-指令-执行-git-cz-指令"><a href="#package-json-中添加-commit-指令-执行-git-cz-指令" class="headerlink" title="package.json 中添加 commit 指令, 执行 git-cz 指令"></a><code>package.json</code> 中添加 commit 指令, 执行 <code>git-cz</code> 指令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> set-script commit <span class="token string">"git-cz"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> set-script commit <span class="token string">"git-cz"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化命令行的选项信息"><a href="#初始化命令行的选项信息" class="headerlink" title="初始化命令行的选项信息"></a>初始化命令行的选项信息</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx commitizen init cz-conventional-changelog --save-dev --save-exact<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装可自定义的-cz-适配器"><a href="#安装可自定义的-cz-适配器" class="headerlink" title="安装可自定义的 cz 适配器"></a>安装可自定义的 cz 适配器</h2><p>因为 commitizen 只支持英文，如果我想要支持中文指令和 emoji，那么就必须安装可自定义的 cz 适配器了</p><h3 id="安装-cz-适配器"><a href="#安装-cz-适配器" class="headerlink" title="安装 cz 适配器"></a>安装 cz 适配器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token parameter variable">-D</span> commitlint-config-cz  cz-customizable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">-D</span> commitlint-config-cz  cz-customizable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在根目录创建-cz-config-js文件"><a href="#在根目录创建-cz-config-js文件" class="headerlink" title="在根目录创建 .cz-config.js文件"></a>在根目录创建 <code>.cz-config.js</code>文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token operator">></span> .cz-config.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="将以下配置内容复制到-cz-config-js文件中"><a href="#将以下配置内容复制到-cz-config-js文件中" class="headerlink" title="将以下配置内容复制到.cz-config.js文件中"></a>将以下配置内容复制到<code>.cz-config.js</code>文件中</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">":sparkles: feat"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"✨ feat:     新功能"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">":bug: fix"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"🐛 fix:      修复bug"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">":package: build"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"📦️ build:    打包"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">":zap: perf"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"⚡️ perf:     性能优化"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">":tada: release"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"🎉 release:  发布正式版"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">":lipstick: style"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"💄 style:    代码的样式美化"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">":recycle: refactor"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"♻️  refactor: 重构"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">":pencil2: docs"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"✏️  docs:     文档变更"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">":white_check_mark: test"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"✅ test:     测试"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">":rewind: revert"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"⏪️ revert:   回退"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">":rocket: chore"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"🚀 chore:    构建/工程依赖/工具"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">":construction_worker: ci"</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"👷 ci:       CI related changes"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">messages</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"请选择提交类型(必填)"</span><span class="token punctuation">,</span>    <span class="token literal-property property">customScope</span><span class="token operator">:</span> <span class="token string">"请输入文件修改范围(可选)"</span><span class="token punctuation">,</span>    <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token string">"请简要描述提交(必填)"</span><span class="token punctuation">,</span>    <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">"请输入详细描述(可选)"</span><span class="token punctuation">,</span>    <span class="token literal-property property">breaking</span><span class="token operator">:</span> <span class="token string">"列出任何BREAKING CHANGES(可选)"</span><span class="token punctuation">,</span>    <span class="token literal-property property">footer</span><span class="token operator">:</span> <span class="token string">"请输入要关闭的issue(可选)"</span><span class="token punctuation">,</span>    <span class="token literal-property property">confirmCommit</span><span class="token operator">:</span> <span class="token string">"确定提交此说明吗？"</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">allowCustomScopes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 跳过问题</span>  <span class="token literal-property property">skipQuestions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"body"</span><span class="token punctuation">,</span> <span class="token string">"footer"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">subjectLimit</span><span class="token operator">:</span> <span class="token number">72</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将-cz-customizable-脚本添加到您的-package-json"><a href="#将-cz-customizable-脚本添加到您的-package-json" class="headerlink" title="将 cz-customizable 脚本添加到您的 package.json"></a>将 cz-customizable 脚本添加到您的 <code>package.json</code></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> set-script commit <span class="token string">"git add . &amp;&amp; cz-customizable"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> set-script commit <span class="token string">"git add . &amp;&amp; cz-customizable"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-git-commit-emoji"><a href="#安装-git-commit-emoji" class="headerlink" title="安装 git-commit-emoji"></a>安装 git-commit-emoji</h2><h3 id="安装-emoji-插件"><a href="#安装-emoji-插件" class="headerlink" title="安装 emoji 插件"></a>安装 emoji 插件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span>  commitlint-config-git-commit-emoji<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">-D</span>  commitlint-config-git-commit-emoji<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="更新-commitlint-config-js"><a href="#更新-commitlint-config-js" class="headerlink" title="更新 commitlint.config.js"></a>更新 <code>commitlint.config.js</code></h3><p>移除 extends 中原来的 <code>@commitlint/config-conventional</code>，加入<code>&#39;git-commit-emoji&#39;, &#39;cz&#39;</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"git-commit-emoji"</span><span class="token punctuation">,</span> <span class="token string">"cz"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="含-emoji-的自动化提示选项列表"><a href="#含-emoji-的自动化提示选项列表" class="headerlink" title="含 emoji 的自动化提示选项列表"></a>含 emoji 的自动化提示选项列表</h3><p>使用 <code>npm run commit</code>或者<code>yarn commit</code> 代替 <code>git commit</code><br>在命令行中输入 <code>npm run commit</code>或者<code>yarn commit</code> ，即可通过键盘上下键选择需要要的 <code>commit type</code>了。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="根据-commit-message-自动生成-changelog"><a href="#根据-commit-message-自动生成-changelog" class="headerlink" title="根据 commit message 自动生成 changelog"></a>根据 commit message 自动生成 changelog</h3><h4 id="安装-conventional-changelog"><a href="#安装-conventional-changelog" class="headerlink" title="安装 conventional-changelog"></a>安装 conventional-changelog</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> conventional-changelog conventional-changelog-cli --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> conventional-changelog conventional-changelog-cli --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="将-changelog-脚本添加到您的-package-json"><a href="#将-changelog-脚本添加到您的-package-json" class="headerlink" title="将 changelog 脚本添加到您的 package.json"></a>将 changelog 脚本添加到您的 <code>package.json</code></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> set-script changelog <span class="token string">"conventional-changelog -p cz-config.js -i CHANGELOG.md -s -r 0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> set-script changelog <span class="token string">"conventional-changelog -p cz-config.js -i CHANGELOG.md -s -r 0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加成功："><a href="#添加成功：" class="headerlink" title="添加成功："></a>添加成功：</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"changelog"</span><span class="token operator">:</span> <span class="token string">"conventional-changelog -p cz-config.js -i CHANGELOG.md -s -r 0"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">指令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="left">-p</td><td align="center">指定风格*</td></tr><tr><td align="left">-i</td><td align="center">CHANGELOG.md 指定输出的文件名称</td></tr><tr><td align="left">-s</td><td align="center">输出到 infile，这样就不需要指定与 outfile 相同的文件</td></tr><tr><td align="left">-r</td><td align="center">从最新的版本生成多少个版本。如果为 0，则整个更改日志将被重新生成，输出文件将被覆盖。默认值:1</td></tr><tr><td align="left">-n</td><td align="center">.&#x2F;changelog-option.js 指定自定义配置</td></tr></tbody></table><h4 id="运行命令生成最新CHANGELOG"><a href="#运行命令生成最新CHANGELOG" class="headerlink" title="运行命令生成最新CHANGELOG"></a>运行命令生成最新CHANGELOG</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> changelog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run changelog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用自动化工具后，还可以用-git-commit-m-quot-quot-提交代码吗？"><a href="#使用自动化工具后，还可以用-git-commit-m-quot-quot-提交代码吗？" class="headerlink" title="使用自动化工具后，还可以用 git commit - m &quot;&quot;提交代码吗？"></a>使用自动化工具后，还可以用 <code>git commit - m &quot;&quot;</code>提交代码吗？</h3><p>可以。<br>配置自动化工具后，不仅支持<code>npm run commit</code>或者<code>yarn commit</code>自动化提示选择提交，也可以继续使用 <code>git commit - m &quot;&quot;</code>提交,只是写type的时候前面还需要加上emoji的字符串。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/jackson_wen/article/details/127921063">Git commit校验工具commitlint的配置与使用-zhimingwen</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;husky&lt;br&gt;操作 git 钩子的工具&lt;/li&gt;
&lt;li&gt;commitlint&lt;br&gt;commit 信息校验工具&lt;/li&gt;
</summary>
      
    
    
    
    <category term="Git" scheme="https://xiakeming97.github.io/categories/Git/"/>
    
    
    <category term="Gitmoji" scheme="https://xiakeming97.github.io/tags/Gitmoji/"/>
    
    <category term="Comitlint" scheme="https://xiakeming97.github.io/tags/Comitlint/"/>
    
    <category term="项目规范" scheme="https://xiakeming97.github.io/tags/%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83/"/>
    
    <category term="git" scheme="https://xiakeming97.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>React获取子组件(函数组件)的方法属性</title>
    <link href="https://xiakeming97.github.io/2023/06/16/react-huo-qu-zi-zu-jian-han-shu-zu-jian-de-fang-fa-shu-xing/"/>
    <id>https://xiakeming97.github.io/2023/06/16/react-huo-qu-zi-zu-jian-han-shu-zu-jian-de-fang-fa-shu-xing/</id>
    <published>2023-06-16T08:05:51.659Z</published>
    <updated>2023-07-03T06:58:43.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>在父组件想通过ref的方式获取到子组件的方法或者属性时,发现不好使因为获取到的是<code>current:null</code>。经过学习了解，在react中想通过ref获取子组件的实例，子组件必须是类组件才行。关于函数组件的获取方法就有了以下的教程。</p><h2 id="用到技术"><a href="#用到技术" class="headerlink" title="用到技术"></a>用到技术</h2><ul><li>forwardRef<br><strong>forwardRef</strong> 是 React 提供的一个高阶函数（Higher-Order Function），用于在函数组件中转发 <strong>ref</strong>。<br>示例<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> forwardRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> ChildComponent <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 子组件的内容</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Child Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ChildComponent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>useImperativeHandle<br><strong>useImperativeHandle</strong> 是 React 的一个钩子函数，用于在函数组件中<strong>自定义暴露给父组件的实例值或方法</strong><br>通常情况下，函数组件的内部状态和方法是对外隐藏的，父组件无法直接访问或调用。但是，在某些情况下，我们可能希望函数组件能够向外部暴露一些特定的实例值或方法，这时就可以使用 useImperativeHandle。<br>useImperativeHandle 接收两个参数：ref 和一个回调函数。回调函数可以返回一个对象，该对象中的属性和方法将会成为父组件中通过 ref 访问到的实例值或方法。<br>示例<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> forwardRef<span class="token punctuation">,</span> useImperativeHandle <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> ChildComponent <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">internalMethod</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Internal method called!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">externalMethod</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'External method called!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    internalMethod  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Child Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ChildComponent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> forwardRef<span class="token punctuation">,</span> useImperativeHandle <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token comment">/**这里有不同需要使用forwardRef包裹 */</span><span class="token keyword">const</span> ChildComponent <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">internalMethod</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Internal method called!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token function-variable function">externalMethod</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'External method called!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    internalMethod  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Child Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ChildComponent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2023-7-23-遇到新问题"><a href="#2023-7-23-遇到新问题" class="headerlink" title="2023-7-23 遇到新问题"></a>2023-7-23 遇到新问题</h2><h3 id="当我在项目中使用到dva或者redux的connect来转发数据时无法获取到数据"><a href="#当我在项目中使用到dva或者redux的connect来转发数据时无法获取到数据" class="headerlink" title="当我在项目中使用到dva或者redux的connect来转发数据时无法获取到数据"></a>当我在项目中使用到dva或者redux的connect来转发数据时无法获取到数据</h3><p>所以有了一下的补充<br><strong>在dva中的代码如下</strong></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>forwardRef<span class="token punctuation">,</span> useImperativeHandle <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> connect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'umi'</span><span class="token keyword">const</span> <span class="token function-variable function">AddEditSite</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        dispatch<span class="token punctuation">,</span>        <span class="token comment">/**转发Ref */</span>        refInstance<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props    <span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">=</span> mapDispatchToProps    <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>refInstance<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">values<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setAddOrEditType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>            <span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/**这里也有所不同 */</span><span class="token keyword">const</span> ConnectedAddEditSite <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>AddEditSite<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> ref</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ConnectedAddEditSite</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span></span> <span class="token attr-name">refInstance</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体原因现在还没有搞明白<br>后期再来学习需要的资料 <a href="https://react-redux.js.org/api/connect">React Redux官网</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;遇到问题&quot;&gt;&lt;a href=&quot;#遇到问题&quot; class=&quot;headerlink&quot; title=&quot;遇到问题&quot;&gt;&lt;/a&gt;遇到问题&lt;/h2&gt;&lt;p&gt;在父组件想通过ref的方式获取到子组件的方法或者属性时,发现不好使因为获取到的是&lt;code&gt;current:null&lt;/co</summary>
      
    
    
    
    <category term="教程" scheme="https://xiakeming97.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="React" scheme="https://xiakeming97.github.io/tags/React/"/>
    
    <category term="父子组件" scheme="https://xiakeming97.github.io/tags/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6/"/>
    
    <category term="forwardRef" scheme="https://xiakeming97.github.io/tags/forwardRef/"/>
    
    <category term="useImperativeHandle" scheme="https://xiakeming97.github.io/tags/useImperativeHandle/"/>
    
  </entry>
  
  <entry>
    <title>React开发规范</title>
    <link href="https://xiakeming97.github.io/2023/05/31/react-kai-fa-gui-fan/"/>
    <id>https://xiakeming97.github.io/2023/05/31/react-kai-fa-gui-fan/</id>
    <published>2023-05-31T12:27:22.195Z</published>
    <updated>2023-06-02T02:31:14.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>1、缩进 4 个空格，如果是 tab 也设置成 4 个空格</p><p>2、命名时尽量用英文，文件名，组件名等，单词多的可以大写简写 <a href="https://varbook.uiuing.com/">英文不好的可以使用该网站</a></p><p>3、函数名字尽量以 handle 开头，如 handleSubmit &#x3D; () &#x3D;&gt;{}；尽量使用动词开头</p><table><thead><tr><th>动词</th><th>含义</th></tr></thead><tbody><tr><td>can</td><td>判断是否可执行某个动作</td></tr><tr><td>has</td><td>判断是否含有某个值</td></tr><tr><td>is</td><td>判断是否为某个值</td></tr><tr><td>get</td><td>获取某个值</td></tr><tr><td>set</td><td>设置某个值</td></tr></tbody></table><p>4、文件夹命名统一小写； 组件，或者类名,首字母全部大写，遵守驼峰命名法；</p><p>​ img 存放图片 app APP 一些 component artcomponent 一些 art 组件</p><p>5、</p><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// node_modules</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> Component <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Form<span class="token punctuation">,</span> Card<span class="token punctuation">,</span> Button<span class="token punctuation">,</span> Divider<span class="token punctuation">,</span> message<span class="token punctuation">,</span> Alert <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"antd"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> connect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"dva"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"umi/router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> PageHeaderWrapper <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@ant-design/pro-layout"</span><span class="token punctuation">;</span><span class="token comment">// 项目公共模块</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> CustomFormHOC <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/components/FormWidget"</span><span class="token punctuation">;</span><span class="token comment">// 当前业务耦合模块</span><span class="token keyword">import</span> TransportInfo <span class="token keyword">from</span> <span class="token string">"./TransportInfo"</span><span class="token punctuation">;</span><span class="token keyword">import</span> RecordInfo <span class="token keyword">from</span> <span class="token string">"./RecordInfo"</span><span class="token punctuation">;</span><span class="token comment">// 样式文件</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">"./index.less"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;命名&quot;&gt;&lt;a href=&quot;#命名&quot; class=&quot;headerlink&quot; title=&quot;命名&quot;&gt;&lt;/a&gt;命名&lt;/h2&gt;&lt;p&gt;1、缩进 4 个空格，如果是 tab 也设置成 4 个空格&lt;/p&gt;
&lt;p&gt;2、命名时尽量用英文，文件名，组件名等，单词多的可以大写简写 &lt;a</summary>
      
    
    
    
    <category term="教程" scheme="https://xiakeming97.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="React" scheme="https://xiakeming97.github.io/tags/React/"/>
    
    <category term="开发规范" scheme="https://xiakeming97.github.io/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
</feed>
